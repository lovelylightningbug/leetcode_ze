class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result;
       
        for(int i=0; i<nums.size()-1; i++)
         {
            for(int j=i+1; j<nums.size();j++)
                if(nums[i]+nums[j]==target)
                    {
                        result.push_back(i);
                        result.push_back(j);
                        return result;
                    }
         }
         return result;  //dont forget this step.
    }
    
};

solution2: use hash table

class Solution {
public:
  vector<int> twoSum(vector<int> &nums, int target) {
     unordered_map<int, int> mapping;
     vector<int> result;
     for (int i = 0; i < nums.size(); i++) {
          mapping[nums[i]] = i;
          }
      for (int i = 0; i < nums.size(); i++) {
          const int gap = target - nums[i];
          if (mapping.find(gap) != mapping.end() && mapping[gap] > i) {
                result.push_back(i + 1);
                result.push_back(mapping[gap] + 1);
                break;
                }
        }
        return result;
      }
  };




